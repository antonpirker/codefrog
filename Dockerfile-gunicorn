FROM python:3-slim

# Setting up environment
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONUNBUFFERED=1

# Django configuration
ARG DEBUG=true
ENV DEBUG=$DEBUG

ARG SECRET_KEY
ENV SECRET_KEY=$SECRET_KEY

ARG ALLOWED_HOSTS=localhost:8000,localhost
ENV ALLOWED_HOSTS=$ALLOWED_HOSTS

ARG STATIC_ROOT=/app/maintainer/static
ENV STATIC_ROOT=$STATIC_ROOT

ARG LOG_LEVEL=INFO
ENV LOG_LEVEL=$LOG_LEVEL

# Database configuration
ARG DATABASE_URL=postgres://codefrog:codefrog@postgres/codefrog?CONN_MAX_AGE=600
ENV DATABASE_URL=$DATABASE_URL

# Celery configuration
ARG CELERY_BROKER_URL=redis://redis:6379/0
ENV CELERY_BROKER_URL=$CELERY_BROKER_URL

ARG CELERY_TASK_ALWAYS_EAGER=true
ENV CELERY_TASK_ALWAYS_EAGER=$CELERY_TASK_ALWAYS_EAGER

ARG CELERY_WORKER_MAX_TASKS_PER_CHILD=5
ENV CELERY_WORKER_MAX_TASKS_PER_CHILD=$CELERY_WORKER_MAX_TASKS_PER_CHILD

ARG CELERY_WORKER_MAX_MEMORY_PER_CHILD=102400
ENV CELERY_WORKER_MAX_MEMORY_PER_CHILD=$CELERY_WORKER_MAX_MEMORY_PER_CHILD

# Github Oauth configuration
# (for fetching information from GitHub from repos that have the Github App not installed.)
ARG GITHUB_CLIENT_ID
ENV GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID

ARG GITHUB_CLIENT_SECRET
ENV GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET

# Github App onfiguration
ARG GITHUB_APP_IDENTIFIER
ENV GITHUB_APP_IDENTIFIER=$GITHUB_APP_IDENTIFIER

ARG GITHUB_APP_CLIENT_ID
ENV GITHUB_APP_CLIENT_ID=$GITHUB_APP_CLIENT_ID

ARG GITHUB_APP_CLIENT_SECRET
ENV GITHUB_APP_CLIENT_SECRET=$GITHUB_APP_CLIENT_SECRET

ARG GITHUB_AUTH_REDIRECT_URI
ENV GITHUB_AUTH_REDIRECT_URI=$GITHUB_AUTH_REDIRECT_URI

ARG GITHUB_WEBHOOK_SECRET
ENV GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET

ARG GITHUB_PRIVATE_KEY
ENV GITHUB_PRIVATE_KEY=$GITHUB_PRIVATE_KEY

# Codefrog configuration
ARG PROJECT_SOURCE_CODE_DIR=/codefrog/project_source_code
ENV PROJECT_SOURCE_CODE_DIR=$PROJECT_SOURCE_CODE_DIR

WORKDIR /app

# Install dependencies
RUN apt-get update -qy \
    && apt-get install -qy --no-install-recommends \
        git-core \
        libpq-dev \
        make \
        automake \
        gcc \
        g++ \
        subversion \
        python3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install python dependencies
COPY requirements.txt /requirements.txt
RUN pip install --no-cache-dir -r /requirements.txt

# Copy application code
COPY maintainer maintainer

# Silence warning about the missing .env file
RUN touch /app/.env

WORKDIR /app/maintainer/

# Create database
# this is run in the build of the container, and in this the postgres service is not running. so it should be run in the "docker-compose up" part
RUN python ./manage.py migrate

# Copy static files to right location
RUN python ./manage.py collectstatic

CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "1", "--threads", "8", "wsgi:application"]
